/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "acesso.io/eventhorizon/pkg/apis/eventhorizon/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SingularityLister helps list Singularities.
type SingularityLister interface {
	// List lists all Singularities in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Singularity, err error)
	// Singularities returns an object that can list and get Singularities.
	Singularities(namespace string) SingularityNamespaceLister
	SingularityListerExpansion
}

// singularityLister implements the SingularityLister interface.
type singularityLister struct {
	indexer cache.Indexer
}

// NewSingularityLister returns a new SingularityLister.
func NewSingularityLister(indexer cache.Indexer) SingularityLister {
	return &singularityLister{indexer: indexer}
}

// List lists all Singularities in the indexer.
func (s *singularityLister) List(selector labels.Selector) (ret []*v1alpha1.Singularity, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Singularity))
	})
	return ret, err
}

// Singularities returns an object that can list and get Singularities.
func (s *singularityLister) Singularities(namespace string) SingularityNamespaceLister {
	return singularityNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SingularityNamespaceLister helps list and get Singularities.
type SingularityNamespaceLister interface {
	// List lists all Singularities in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Singularity, err error)
	// Get retrieves the Singularity from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Singularity, error)
	SingularityNamespaceListerExpansion
}

// singularityNamespaceLister implements the SingularityNamespaceLister
// interface.
type singularityNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Singularities in the indexer for a given namespace.
func (s singularityNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Singularity, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Singularity))
	})
	return ret, err
}

// Get retrieves the Singularity from the indexer for a given namespace and name.
func (s singularityNamespaceLister) Get(name string) (*v1alpha1.Singularity, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("singularity"), name)
	}
	return obj.(*v1alpha1.Singularity), nil
}
